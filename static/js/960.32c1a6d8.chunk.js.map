{"version":3,"file":"static/js/960.32c1a6d8.chunk.js","mappings":"iPAwBaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAgCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBG,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAEE,OAAlBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACd,OAAQD,GACN,IAAK,QACHT,EAASU,GACT,MACF,IAAK,WACHN,EAAYM,GAMpB,EAaE,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SAba,SAAAN,GACnBA,EAAEO,iBACF,IAAMC,EAAOR,EAAES,cACftB,GACEuB,EAAAA,EAAAA,IAAM,CACJjB,MAAOe,EAAKG,SAASlB,MAAMW,MAC3BP,SAAUW,EAAKG,SAASd,SAASO,SAGrCI,EAAKI,OACP,EAGgCC,aAAa,MAAKC,SAAA,EAC9CT,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,SAELC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,QAAQb,KAAK,QAAQC,MAAOX,EAAOwB,SAAUlB,EAAcmB,UAAQ,QAEjFb,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,YAELC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,WAAWb,KAAK,WAAWC,MAAOP,EAAWoB,SAAUlB,EAAcmB,UAAQ,QAE3FH,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,aAgD5B,EC7Ge,SAASK,IACtB,OACEd,EAAAA,EAAAA,MAAA,OAAAS,SAAA,EACEC,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CAAAN,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,aAETC,EAAAA,EAAAA,KAAC7B,EAAS,MAGhB,C","sources":["components/LoginForm/LoginForm.js","pages/Login.js"],"sourcesContent":["// import { Formik, Form, Field} from 'formik';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'services/fetchAuth';\n// import {\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   Button,\n//   FormErrorMessage,\n// } from '@chakra-ui/react';\n// import * as Yup from 'yup';\n// const contactSchema = Yup.object().shape({\n//   name: Yup.string()\n//     .min(3, 'Too Short!')\n//     .max(30, 'Too Long!')\n//     .required('Required'),\n//   number: Yup.number()\n//     .integer('Must be an integer')\n//     .min(1000000, 'Must be at least 7 digits')\n//     // .max(9999999, 'Must be at most 7 digits')\n//     .required('Required'),\n// });\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        break;\n    }\n    \n}\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <label>\n        Email\n        <input type=\"email\" name=\"email\" value={email} onChange={handleChange} required/>\n      </label>\n      <label>\n        Password\n        <input type=\"password\" name=\"password\" value={password } onChange={handleChange} required/>\n      </label>\n      <button type=\"submit\">Log In</button>\n    </form>\n\n    // <Formik\n    //   initialValues={{\n    //       email: '',\n    //       password: '',\n    //   }}\n    //   //  validationSchema={contactSchema}\n    //   onSubmit={(values, actions) => {\n    //       handleSubmit(values);\n    //       actions.resetForm();\n    //     }}\n    // >\n      \n    //     <Form>\n    //       <Field name='email'>\n    //         {({ field, form }) => (\n    //           <FormControl isInvalid={form.errors.name && form.touched.name}>\n    //             <FormLabel>Email</FormLabel>\n    //             <Input {...field} placeholder='email' />\n    //             <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n    //           </FormControl>\n    //         )}\n    //     </Field>\n    //     <Field name='password'>\n    //         {({ field, form }) => (\n    //           <FormControl isInvalid={form.errors.name && form.touched.name}>\n    //             <FormLabel>Password</FormLabel>\n    //             <Input {...field} placeholder='password' />\n    //             <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n    //           </FormControl>\n    //         )}\n    //     </Field>\n        \n    //       <Button\n    //         mt={4}\n    //         colorScheme='teal'\n    //         type='submit'\n    //       >\n    //         Log In\n    //       </Button>\n    //     </Form>\n      \n    // </Formik>\n\n    \n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["LoginForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleChange","e","_e$target","target","name","value","_jsxs","onSubmit","preventDefault","form","currentTarget","logIn","elements","reset","autoComplete","children","_jsx","type","onChange","required","Login","Helmet"],"sourceRoot":""}