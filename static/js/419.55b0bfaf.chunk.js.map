{"version":3,"file":"static/js/419.55b0bfaf.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n// import { FaTrashCan } from 'react-icons/fa6';\nimport { FaTrash } from \"react-icons/fa6\";\nexport const StyledIcon = styled(FaTrash)`\n  color: #1C56C3;\n  &:hover {\n    color: #0E45AB ;\n  }\n`;\n\nexport const List = styled.ul`\n  width: 90%;\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  margin: 30px auto;\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 10px;\n  padding: 14px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 3px -2px,\n    rgb(0 0 0 / 14%) 0px 3px 4px 0px, rgb(0 0 0 / 12%) 0px 1px 8px 0px;\n  border-radius: 4px;\n  background-color: #C4D2EE ;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const ListItemText = styled.div`\n  font-size: 16px;\n`;\n\nexport const DeleteButton = styled.button`\n  background-color: inherit;\n  color: #fff;\n  border: none;\n  font-size: 14px;\n  cursor: pointer;\n  outline: none;\n  border-radius: 4px;\n`;\n","import {\n  ListItemText,\n  DeleteButton,\n  ListItem,\n  List,\n} from './ContactList.styled';\nimport { selectVisibleContacts } from '../../redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'services/fetchContacts';\nimport { StyledIcon } from './ContactList.styled';\nimport { Heading } from '@chakra-ui/react';\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <Heading as='h2' size='md'>Your contacts</Heading>\n      <List>\n      {visibleContacts.map(({ id, name, number }) => {\n        return (\n          <ListItem key={id}>\n            <ListItemText>\n              {name} - {number}\n            </ListItemText>\n            <DeleteButton onClick={() => dispatch(deleteContact(id))}>\n              <StyledIcon size={22} />\n            </DeleteButton>\n          </ListItem>\n        );\n      })}\n    </List>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-width: 90%;\n  margin: 0 auto;\n  text-align: center;\n  /* padding: 20px; */\n  /* box-shadow: rgb(0 0 0 / 20%) 0px 3px 3px -2px,\n    rgb(0 0 0 / 14%) 0px 3px 4px 0px, rgb(0 0 0 / 12%) 0px 1px 8px 0px;\n  border-radius: 8px; */\n  /* background-color: rgb(254, 236, 224); */\n  background-color: inherit;\n`;\nexport const StyledLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const Field = styled(FormikField)`\n  font-size: 16px;\n  border: 1px solid #1C56C3;\n  border-radius: 4px;\n  outline: none;\n  padding: 12px;\n`;\n\nexport const FormButton = styled.button`\n  background-color: #1C56C3;\n  color: #fff;\n  border: none;\n  padding: 12px 20px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  outline: none;\n  border-radius: 4px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 3px -2px,\n    rgb(0 0 0 / 14%) 0px 3px 4px 0px, rgb(0 0 0 / 12%) 0px 1px 8px 0px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color:#0E45AB ;\n  }\n`;\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 14;\n  color: #d15803;\n`;\n","import { Formik } from 'formik';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport {\n  Form,\n  StyledLabel,\n  Field,\n  FormButton,\n  ErrorMessage,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/selectors';\nimport { addContact } from 'services/fetchContacts';\nimport * as Yup from 'yup';\nimport { Heading } from '@chakra-ui/react'\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(30, 'Too Long!')\n    .required('Required'),\n  number: Yup.number()\n    .integer('Must be an integer')\n    .min(1000000, 'Must be at least 7 digits')\n    // .max(9999999, 'Must be at most 7 digits')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleContacts = values => {\n    const checkContact = contacts.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (checkContact) {\n      Notify.warning(`${values.name} is already in contacts.`, {\n        width: '400px',\n        position: 'center-center',\n        timeout: 2000,\n        fontSize: '20px',\n      });\n      return;\n    }\n    dispatch(addContact(values));\n  };\n  return (\n    <>\n      <Heading as='h1' size='md'>Add contact</Heading>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={(values, actions) => {\n          handleContacts(values);\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <StyledLabel htmlFor=\"name\">\n            Name:\n            <Field name=\"name\"/>\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </StyledLabel>\n\n          <StyledLabel htmlFor=\"number\">\n            Number:\n            <Field name=\"number\" type=\"tel\" />\n            <ErrorMessage name=\"number\" component=\"span\" />\n          </StyledLabel>\n\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\ndisplay: block;\n  width: 90%;\n  font-size: 16px;\n  border: 1px solid #1C56C3;\n  border-radius: 4px;\n  outline: none;\n  padding: 12px;\n  margin: 20px auto;\n`;\n","// import { Text } from '@chakra-ui/react';\nimport { setFilter } from '../../redux/filterSlice';\nimport { selectFilter } from '../../redux/selectors';\nimport { FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  return (\n    <>\n      {/* <Text fontSize='18px'>Find contacts by name</Text> */}\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        placeholder=\"Find contacts by name:\"\n        onChange={evt => dispatch(setFilter(evt.target.value))}\n        required\n      />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../redux/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'services/fetchContacts';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Container } from '@chakra-ui/react';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxW='md' borderRadius='md' textAlign=\"center\" p=\"4\">\n      {isLoading && <Loader/>}\n      <ContactForm />\n      <Filter />\n      {error ? <p>error</p> : <ContactList />}\n      {contacts.length === 0 && !error && !isLoading && <p>no contacts</p>}\n    </Container>\n  );\n}\n"],"names":["StyledIcon","styled","FaTrash","_templateObject","_taggedTemplateLiteral","List","_templateObject2","ListItem","_templateObject3","ListItemText","_templateObject4","DeleteButton","_templateObject5","ContactList","dispatch","useDispatch","visibleContacts","useSelector","selectVisibleContacts","_jsxs","_Fragment","children","_jsx","Heading","as","size","map","_ref","id","name","number","onClick","deleteContact","Form","FormikForm","StyledLabel","Field","FormikField","FormButton","ErrorMessage","FormikError","contactSchema","Yup","shape","min","max","required","integer","ContactForm","contacts","selectContacts","Formik","initialValues","validationSchema","onSubmit","values","actions","find","contact","toLowerCase","Notify","concat","width","position","timeout","fontSize","addContact","handleContacts","resetForm","htmlFor","component","type","FilterInput","Filter","filter","selectFilter","value","placeholder","onChange","evt","setFilter","target","Contacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","Container","maxW","borderRadius","textAlign","p","Loader","length"],"sourceRoot":""}